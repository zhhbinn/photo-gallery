import path from 'node:path'

import type { _Object } from '@aws-sdk/client-s3'
import type { Exif } from 'exif-reader'
import sharp from 'sharp'

import { HEIC_FORMATS } from '../constants/index.js'
import { extractExifData } from '../image/exif.js'
import {
  getImageMetadataWithSharp,
  preprocessImageBuffer,
} from '../image/processor.js'
import {
  generateThumbnailAndBlurhash,
  thumbnailExists,
} from '../image/thumbnail.js'
import type { Logger } from '../logger/index.js'
import { needsUpdate } from '../manifest/manager.js'
import { generateS3Url, getImageFromS3 } from '../s3/operations.js'
import type { S3Config } from '../storage/interfaces.js'
import type { PhotoManifestItem, ProcessPhotoResult } from '../types/photo.js'
import { extractPhotoInfo } from './info-extractor.js'

export interface PhotoProcessorOptions {
  isForceMode: boolean
  isForceManifest: boolean
  isForceThumbnails: boolean
}

export interface WorkerLoggers {
  image: Logger['image']
  s3: Logger['s3']
  thumbnail: Logger['thumbnail']
  blurhash: Logger['blurhash']
  exif: Logger['exif']
}

// Â§ÑÁêÜÂçïÂº†ÁÖßÁâá
export async function processPhoto(
  obj: _Object,
  index: number,
  workerId: number,
  totalImages: number,
  existingManifestMap: Map<string, PhotoManifestItem>,
  livePhotoMap: Map<string, _Object>,
  options: PhotoProcessorOptions,
  logger: Logger,
  s3Config?: S3Config,
): Promise<ProcessPhotoResult> {
  const key = obj.Key
  if (!key) {
    logger.image.warn(`Ë∑≥ËøáÊ≤°Êúâ Key ÁöÑÂØπË±°`)
    return { item: null, type: 'failed' }
  }

  const photoId = path.basename(key, path.extname(key))
  const existingItem = existingManifestMap.get(key)

  // ÂàõÂª∫ worker ‰∏ìÁî®ÁöÑ logger
  const workerLoggers: WorkerLoggers = {
    image: logger.worker(workerId).withTag('IMAGE'),
    s3: logger.worker(workerId).withTag('S3'),
    thumbnail: logger.worker(workerId).withTag('THUMBNAIL'),
    blurhash: logger.worker(workerId).withTag('BLURHASH'),
    exif: logger.worker(workerId).withTag('EXIF'),
  }

  workerLoggers.image.info(`üì∏ [${index + 1}/${totalImages}] ${key}`)

  // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊõ¥Êñ∞
  if (
    !options.isForceMode &&
    !options.isForceManifest &&
    existingItem &&
    !needsUpdate(existingItem, obj)
  ) {
    // Ê£ÄÊü•Áº©Áï•ÂõæÊòØÂê¶Â≠òÂú®ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®ÊàñÂº∫Âà∂Âà∑Êñ∞Áº©Áï•ÂõæÂàôÈúÄË¶ÅÈáçÊñ∞Â§ÑÁêÜ
    const hasThumbnail = await thumbnailExists(photoId)
    if (hasThumbnail && !options.isForceThumbnails) {
      workerLoggers.image.info(`‚è≠Ô∏è Ë∑≥ËøáÂ§ÑÁêÜ (Êú™Êõ¥Êñ∞‰∏îÁº©Áï•ÂõæÂ≠òÂú®): ${key}`)
      return { item: existingItem, type: 'skipped' }
    } else {
      if (options.isForceThumbnails) {
        workerLoggers.image.info(`üîÑ Âº∫Âà∂ÈáçÊñ∞ÁîüÊàêÁº©Áï•ÂõæÔºö${key}`)
      } else {
        workerLoggers.image.info(
          `üîÑ ÈáçÊñ∞ÁîüÊàêÁº©Áï•Âõæ (Êñá‰ª∂Êú™Êõ¥Êñ∞‰ΩÜÁº©Áï•ÂõæÁº∫Â§±): ${key}`,
        )
      }
    }
  }

  // ÈúÄË¶ÅÂ§ÑÁêÜÁöÑÁÖßÁâáÔºàÊñ∞ÁÖßÁâá„ÄÅÊõ¥Êñ∞ÁöÑÁÖßÁâáÊàñÁº∫Â§±Áº©Áï•ÂõæÁöÑÁÖßÁâáÔºâ
  const isNewPhoto = !existingItem
  if (isNewPhoto) {
    workerLoggers.image.info(`üÜï Êñ∞ÁÖßÁâáÔºö${key}`)
  } else {
    workerLoggers.image.info(`üîÑ Êõ¥Êñ∞ÁÖßÁâáÔºö${key}`)
  }

  try {
    // Ëé∑ÂèñÂõæÁâáÊï∞ÊçÆ
    const rawImageBuffer = await getImageFromS3(key, workerLoggers.s3)
    if (!rawImageBuffer) return { item: null, type: 'failed' }

    // È¢ÑÂ§ÑÁêÜÂõæÁâáÔºàÂ§ÑÁêÜ HEIC/HEIF Ê†ºÂºèÔºâ
    let imageBuffer: Buffer
    try {
      imageBuffer = await preprocessImageBuffer(
        rawImageBuffer,
        key,
        workerLoggers.image,
      )
    } catch (error) {
      workerLoggers.image.error(`È¢ÑÂ§ÑÁêÜÂõæÁâáÂ§±Ë¥•Ôºö${key}`, error)
      return { item: null, type: 'failed' }
    }

    // ÂàõÂª∫ Sharp ÂÆû‰æãÔºåÂ§çÁî®‰∫éÂ§ö‰∏™Êìç‰Ωú
    const sharpInstance = sharp(imageBuffer)

    // Ëé∑ÂèñÂõæÁâáÂÖÉÊï∞ÊçÆÔºàÂ§çÁî® Sharp ÂÆû‰æãÔºâ
    const metadata = await getImageMetadataWithSharp(
      sharpInstance,
      workerLoggers.image,
    )
    if (!metadata) return { item: null, type: 'failed' }

    // Â¶ÇÊûúÊòØÂ¢ûÈáèÊõ¥Êñ∞‰∏îÂ∑≤Êúâ blurhashÔºåÂèØ‰ª•Â§çÁî®
    let thumbnailUrl: string | null = null
    let thumbnailBuffer: Buffer | null = null
    let blurhash: string | null = null

    if (
      !options.isForceMode &&
      !options.isForceThumbnails &&
      existingItem?.blurhash &&
      (await thumbnailExists(photoId))
    ) {
      // Â§çÁî®Áé∞ÊúâÁöÑÁº©Áï•ÂõæÂíå blurhash
      blurhash = existingItem.blurhash
      workerLoggers.blurhash.info(`Â§çÁî®Áé∞Êúâ blurhash: ${photoId}`)

      try {
        const fs = await import('node:fs/promises')
        const thumbnailPath = path.join(
          process.cwd(),
          'public/thumbnails',
          `${photoId}.webp`,
        )
        thumbnailBuffer = await fs.readFile(thumbnailPath)
        thumbnailUrl = `/thumbnails/${photoId}.webp`
        workerLoggers.thumbnail.info(`Â§çÁî®Áé∞ÊúâÁº©Áï•ÂõæÔºö${photoId}`)
      } catch (error) {
        workerLoggers.thumbnail.warn(
          `ËØªÂèñÁé∞ÊúâÁº©Áï•ÂõæÂ§±Ë¥•ÔºåÈáçÊñ∞ÁîüÊàêÔºö${photoId}`,
          error,
        )
        // ÁªßÁª≠ÊâßË°åÁîüÊàêÈÄªËæë
      }
    }

    // Â¶ÇÊûúÊ≤°ÊúâÂ§çÁî®ÊàêÂäüÔºåÂàôÁîüÊàêÁº©Áï•ÂõæÂíå blurhash

    const result = await generateThumbnailAndBlurhash(
      imageBuffer,
      photoId,
      metadata.width,
      metadata.height,
      options.isForceMode || options.isForceThumbnails,
      {
        thumbnail: workerLoggers.thumbnail,
        blurhash: workerLoggers.blurhash,
      },
      s3Config,
      key,
    )

    thumbnailUrl = result.thumbnailUrl
    if (!thumbnailBuffer) {
      thumbnailBuffer = result.thumbnailBuffer
    }

    blurhash = result.blurhash

    // Â¶ÇÊûúÊòØÂ¢ûÈáèÊõ¥Êñ∞‰∏îÂ∑≤Êúâ EXIF Êï∞ÊçÆÔºåÂèØ‰ª•Â§çÁî®
    let exifData: Exif | null = null
    if (
      !options.isForceMode &&
      !options.isForceManifest &&
      existingItem?.exif
    ) {
      exifData = existingItem.exif
      workerLoggers.exif.info(`Â§çÁî®Áé∞Êúâ EXIF Êï∞ÊçÆÔºö${photoId}`)
    } else {
      // ‰º†ÂÖ•ÂéüÂßã buffer ‰ª•‰æøÂú®ËΩ¨Êç¢ÂêéÁöÑÂõæÁâáÁº∫Â∞ë EXIF Êó∂ÂõûÈÄÄ
      const ext = path.extname(key).toLowerCase()
      const originalBuffer = HEIC_FORMATS.has(ext) ? rawImageBuffer : undefined
      exifData = await extractExifData(
        imageBuffer,
        originalBuffer,
        workerLoggers.exif,
      )
    }

    // ÊèêÂèñÁÖßÁâá‰ø°ÊÅØÔºàÂú®Ëé∑Âèñ EXIF Êï∞ÊçÆ‰πãÂêéÔºå‰ª•‰æø‰ΩøÁî® DateTimeOriginalÔºâ
    const photoInfo = extractPhotoInfo(key, exifData, workerLoggers.image)

    const aspectRatio = metadata.width / metadata.height

    // Ê£ÄÊü•ÊòØÂê¶‰∏∫ live photo
    const livePhotoVideo = livePhotoMap.get(key)
    const isLivePhoto = !!livePhotoVideo
    let livePhotoVideoUrl: string | undefined
    let livePhotoVideoS3Key: string | undefined

    if (isLivePhoto && livePhotoVideo?.Key) {
      livePhotoVideoS3Key = livePhotoVideo.Key
      livePhotoVideoUrl = generateS3Url(livePhotoVideo.Key)
      workerLoggers.image.info(
        `üì± Ê£ÄÊµãÂà∞ Live PhotoÔºö${key} -> ${livePhotoVideo.Key}`,
      )
    }

    const photoItem: PhotoManifestItem = {
      id: photoId,
      title: photoInfo.title,
      description: photoInfo.description,
      dateTaken: photoInfo.dateTaken,
      views: photoInfo.views,
      tags: photoInfo.tags,
      originalUrl: generateS3Url(key),
      thumbnailUrl,
      blurhash,
      width: metadata.width,
      height: metadata.height,
      aspectRatio,
      s3Key: key,
      lastModified: obj.LastModified?.toISOString() || new Date().toISOString(),
      size: obj.Size || 0,
      exif: exifData,
      // Live Photo Áõ∏ÂÖ≥Â≠óÊÆµ
      isLivePhoto,
      livePhotoVideoUrl,
      livePhotoVideoS3Key,
    }

    workerLoggers.image.success(`‚úÖ Â§ÑÁêÜÂÆåÊàêÔºö${key}`)
    return { item: photoItem, type: isNewPhoto ? 'new' : 'processed' }
  } catch (error) {
    workerLoggers.image.error(`‚ùå Â§ÑÁêÜÂ§±Ë¥•Ôºö${key}`, error)
    return { item: null, type: 'failed' }
  }
}
